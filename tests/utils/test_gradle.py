"""Test for gradle.py

Test for the utility for gradle operations.
"""

from io import BytesIO, IOBase
from pathlib import Path
from unittest.mock import call, mock_open, patch

from ploigos_step_runner.utils.gradle import *
from testfixtures import TempDirectory
from tests.helpers.base_test_case import BaseTestCase
from tests.helpers.test_utils import Any

class TestGradleUtils_get_version(BaseTestCase):
    @patch("builtins.open", new_callable=mock_open)
    def test_success_get_version(self, mock_open):
        parser = GradleGroovyParser("fake_test_file")
        parser.raw_file = "/*\n * This file was generated by the Gradle \'init\' task.\n *\n * This generated file contains a sample Java application project to get you started.\n * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.\n */\n\nplugins {\n    // Apply the application plugin to add support for building a CLI application in Java.\n    id \'application\'\n    id \"org.springframework.boot\" version \"2.7.16\"\n\n}\n\nversion \'1.0-SNAPSHOT\'\n\nrepositories {\n    // Use Maven Central for resolving dependencies.\n    mavenCentral()\n}\n\ndependencies {\n    // Use JUnit test framework.\n    testImplementation \'junit:junit:4.13.2\'\n\n    // This dependency is used by the application.\n    implementation \'com.google.guava:guava:32.1.1-jre\'\n    implementation \'org.springframework.boot:spring-boot-starter-web:2.7.16\'\n}\n\n// Apply a specific Java toolchain to ease working on different environments.\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(11)\n    }\n}\n\napplication {\n    // Define the main class for the application.\n    mainClass = \'org.acme.rest.json.gradle.App\'\n}\n"
        output = parser.getVersion()
        assert(output, "1.0-SNAPSHOT")
        
    @patch("builtins.open", new_callable=mock_open)
    def test_failure_multiple_versions_in_file(self, mock_open):
        parser = GradleGroovyParser("fake_test_file")
        parser.raw_file = "/*\n * This file was generated by the Gradle \'init\' task.\n *\n * This generated file contains a sample Java application project to get you started.\n * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.\n */\n\nplugins {\n    // Apply the application plugin to add support for building a CLI application in Java.\n    id \'application\'\n    id \"org.springframework.boot\" version \"2.7.16\"\n\n}\n\nversion \'1.0-SNAPSHOT\'\n\n\n\nversion \'1.2-SNAPSHOT\'\n\nrepositories {\n    // Use Maven Central for resolving dependencies.\n    mavenCentral()\n}\n\ndependencies {\n    // Use JUnit test framework.\n    testImplementation \'junit:junit:4.13.2\'\n\n    // This dependency is used by the application.\n    implementation \'com.google.guava:guava:32.1.1-jre\'\n    implementation \'org.springframework.boot:spring-boot-starter-web:2.7.16\'\n}\n\n// Apply a specific Java toolchain to ease working on different environments.\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(11)\n    }\n}\n\napplication {\n    // Define the main class for the application.\n    mainClass = \'org.acme.rest.json.gradle.App\'\n}\n"
        with self.assertRaises(GradleGroovyParserException) as context:
            output = parser.getVersion()
      
        error_msg = "fake_test_file file: More than one version found. ['1.0-SNAPSHOT', '1.2-SNAPSHOT']"
        self.assertTrue(error_msg in str(context.exception))
        
    @patch("builtins.open", new_callable=mock_open)
    def test_success_no_version_in_file(self, mock_open):
        parser = GradleGroovyParser("fake_test_file")
        parser.raw_file = "/*\n * This file was generated by the Gradle \'init\' task.\n *\n * This generated file contains a sample Java application project to get you started.\n * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.\n */\n\nplugins {\n    // Apply the application plugin to add support for building a CLI application in Java.\n    id \'application\'\n    id \"org.springframework.boot\" version \"2.7.16\"\n\n}\n\nrepositories {\n    // Use Maven Central for resolving dependencies.\n    mavenCentral()\n}\n\ndependencies {\n    // Use JUnit test framework.\n    testImplementation \'junit:junit:4.13.2\'\n\n    // This dependency is used by the application.\n    implementation \'com.google.guava:guava:32.1.1-jre\'\n    implementation \'org.springframework.boot:spring-boot-starter-web:2.7.16\'\n}\n\n// Apply a specific Java toolchain to ease working on different environments.\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(11)\n    }\n}\n\napplication {\n    // Define the main class for the application.\n    mainClass = \'org.acme.rest.json.gradle.App\'\n}\n"
        output = parser.getVersion()
        assert(output, "")
        
    @patch("builtins.open", new_callable=mock_open)
    def test_success_version_in_brackets(self, mock_open):
        parser = GradleGroovyParser("fake_test_file")
        parser.raw_file = "/*\n * This file was generated by the Gradle \'init\' task.\n *\n * This generated file contains a sample Java application project to get you started.\n * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.\n */\n\nplugins {\n    // Apply the application plugin to add support for building a CLI application in Java.\n    id \'application\'\n    id \"org.springframework.boot\" version \"2.7.16\"\n\nversion \'1.0-SNAPSHOT\'\n\n}\n\nrepositories {\n    // Use Maven Central for resolving dependencies.\n    mavenCentral()\n}\n\ndependencies {\n    // Use JUnit test framework.\n    testImplementation \'junit:junit:4.13.2\'\n\n    // This dependency is used by the application.\n    implementation \'com.google.guava:guava:32.1.1-jre\'\n    implementation \'org.springframework.boot:spring-boot-starter-web:2.7.16\'\n}\n\n// Apply a specific Java toolchain to ease working on different environments.\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(11)\n    }\n}\n\napplication {\n    // Define the main class for the application.\n    mainClass = \'org.acme.rest.json.gradle.App\'\n}\n"
        output = parser.getVersion()
        assert(output, "")
        
    @patch("builtins.open", new_callable=mock_open)
    def test_success_get_version_that_has_whitespace(self, mock_open):
        parser = GradleGroovyParser("fake_test_file")
        parser.raw_file = "/*\n * This file was generated by the Gradle \'init\' task.\n *\n * This generated file contains a sample Java application project to get you started.\n * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.\n */\n\nplugins {\n    // Apply the application plugin to add support for building a CLI application in Java.\n    id \'application\'\n    id \"org.springframework.boot\" version \"2.7.16\"\n\n}\n\n      version       \'1.0-SNAPSHOT       \'     \n\nrepositories {\n    // Use Maven Central for resolving dependencies.\n    mavenCentral()\n}\n\ndependencies {\n    // Use JUnit test framework.\n    testImplementation \'junit:junit:4.13.2\'\n\n    // This dependency is used by the application.\n    implementation \'com.google.guava:guava:32.1.1-jre\'\n    implementation \'org.springframework.boot:spring-boot-starter-web:2.7.16\'\n}\n\n// Apply a specific Java toolchain to ease working on different environments.\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(11)\n    }\n}\n\napplication {\n    // Define the main class for the application.\n    mainClass = \'org.acme.rest.json.gradle.App\'\n}\n"
        output = parser.getVersion()
        assert(output, "1.0-SNAPSHOT")
        
    @patch("builtins.open", new_callable=mock_open)
    def test_success_get_file_name(self, mock_open):
        file_name = "fake_test_file"
        parser = GradleGroovyParser(file_name)
        assert(parser.file_name, file_name)

